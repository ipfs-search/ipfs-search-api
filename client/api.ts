/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * ipfs-search API
 * Search files and directories on the [Interplanetary Filesystem](https://ipfs.io/) through the [ipfs-search.com](https://ipfs-search.com) search API.
 *
 * OpenAPI spec version: 1.0.2
 * Contact: info@ipfs-search.com
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://api.ipfs-search.com/v1".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface Hash
 */
export interface Hash {
}
/**
 * 
 * @export
 * @interface Metadata
 */
export interface Metadata {
    /**
     * 
     * @type {any}
     * @memberof Metadata
     */
    metadata?: any;
    /**
     * 
     * @type {number}
     * @memberof Metadata
     */
    version?: number;
    /**
     * 
     * @type {Type}
     * @memberof Metadata
     */
    type?: Type;
}
/**
 * 
 * @export
 * @interface Reference
 */
export interface Reference {
    /**
     * 
     * @type {Hash}
     * @memberof Reference
     */
    parentHash?: Hash;
    /**
     * 
     * @type {string}
     * @memberof Reference
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface SearchResult
 */
export interface SearchResult {
    /**
     * 
     * @type {Hash}
     * @memberof SearchResult
     */
    hash?: Hash;
    /**
     * 
     * @type {string}
     * @memberof SearchResult
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchResult
     */
    description?: string;
    /**
     * 
     * @type {Type}
     * @memberof SearchResult
     */
    type?: Type;
    /**
     * 
     * @type {number}
     * @memberof SearchResult
     */
    size?: number;
    /**
     * 
     * @type {string}
     * @memberof SearchResult
     */
    firstSeen?: string;
    /**
     * 
     * @type {string}
     * @memberof SearchResult
     */
    lastSeen?: string;
    /**
     * 
     * @type {number}
     * @memberof SearchResult
     */
    score?: number;
    /**
     * 
     * @type {Array<Reference>}
     * @memberof SearchResult
     */
    references?: Array<Reference>;
    /**
     * 
     * @type {string}
     * @memberof SearchResult
     */
    mimetype?: string;
}
/**
 * 
 * @export
 * @interface SearchResultList
 */
export interface SearchResultList {
    /**
     * 
     * @type {number}
     * @memberof SearchResultList
     */
    total?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchResultList
     */
    maxScore?: number;
    /**
     * 
     * @type {Array<SearchResult>}
     * @memberof SearchResultList
     */
    hits?: Array<SearchResult>;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum Type {
    Any = <any> 'any',
    File = <any> 'file',
    Directory = <any> 'directory'
}
/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export const DefaultApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Hash} hash Content ID; IPLD [CID](https://specs.ipld.io/block-layer/CID.html).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadatahashGet(hash: Hash, options: any = {}): FetchArgs {
            // verify required parameter 'hash' is not null or undefined
            if (hash === null || hash === undefined) {
                throw new RequiredError('hash','Required parameter hash was null or undefined when calling metadatahashGet.');
            }
            const localVarPath = `/metadata/${hash}/`
                .replace(`{${"hash"}}`, encodeURIComponent(String(hash)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * By default, the score for items with a more recent `last-seen` date are positively boosted while 'unnamed' items (without a `reference` or a `title`) are negatively boosted.
         * @summary Search for files and directories.
         * @param {string} q Search string query, based on Elasticsearch&#x27;s [Query string query](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html#query-dsl-query-string-query) syntax.
         * @param {Type} [type] Resource type. Omit to return all types.
         * @param {number} [page] Page number.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchGet(q: string, type?: Type, page?: number, options: any = {}): FetchArgs {
            // verify required parameter 'q' is not null or undefined
            if (q === null || q === undefined) {
                throw new RequiredError('q','Required parameter q was null or undefined when calling searchGet.');
            }
            const localVarPath = `/search`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Hash} hash Content ID; IPLD [CID](https://specs.ipld.io/block-layer/CID.html).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadatahashGet(hash: Hash, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Metadata> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).metadatahashGet(hash, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * By default, the score for items with a more recent `last-seen` date are positively boosted while 'unnamed' items (without a `reference` or a `title`) are negatively boosted.
         * @summary Search for files and directories.
         * @param {string} q Search string query, based on Elasticsearch&#x27;s [Query string query](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html#query-dsl-query-string-query) syntax.
         * @param {Type} [type] Resource type. Omit to return all types.
         * @param {number} [page] Page number.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchGet(q: string, type?: Type, page?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SearchResultList> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).searchGet(q, type, page, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {Hash} hash Content ID; IPLD [CID](https://specs.ipld.io/block-layer/CID.html).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadatahashGet(hash: Hash, options?: any) {
            return DefaultApiFp(configuration).metadatahashGet(hash, options)(fetch, basePath);
        },
        /**
         * By default, the score for items with a more recent `last-seen` date are positively boosted while 'unnamed' items (without a `reference` or a `title`) are negatively boosted.
         * @summary Search for files and directories.
         * @param {string} q Search string query, based on Elasticsearch&#x27;s [Query string query](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html#query-dsl-query-string-query) syntax.
         * @param {Type} [type] Resource type. Omit to return all types.
         * @param {number} [page] Page number.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchGet(q: string, type?: Type, page?: number, options?: any) {
            return DefaultApiFp(configuration).searchGet(q, type, page, options)(fetch, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {Hash} hash Content ID; IPLD [CID](https://specs.ipld.io/block-layer/CID.html).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metadatahashGet(hash: Hash, options?: any) {
        return DefaultApiFp(this.configuration).metadatahashGet(hash, options)(this.fetch, this.basePath);
    }

    /**
     * By default, the score for items with a more recent `last-seen` date are positively boosted while 'unnamed' items (without a `reference` or a `title`) are negatively boosted.
     * @summary Search for files and directories.
     * @param {string} q Search string query, based on Elasticsearch&#x27;s [Query string query](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html#query-dsl-query-string-query) syntax.
     * @param {Type} [type] Resource type. Omit to return all types.
     * @param {number} [page] Page number.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public searchGet(q: string, type?: Type, page?: number, options?: any) {
        return DefaultApiFp(this.configuration).searchGet(q, type, page, options)(this.fetch, this.basePath);
    }

}
